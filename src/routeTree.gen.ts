/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TopicsTopicIdEventsIndexImport } from './routes/topics/$topicId.events/index'
import { Route as TopicsTopicIdEventsEventIdImport } from './routes/topics/$topicId.events/$eventId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TopicsTopicIdEventsIndexRoute = TopicsTopicIdEventsIndexImport.update({
  id: '/topics/$topicId/events/',
  path: '/topics/$topicId/events/',
  getParentRoute: () => rootRoute,
} as any)

const TopicsTopicIdEventsEventIdRoute = TopicsTopicIdEventsEventIdImport.update(
  {
    id: '/topics/$topicId/events/$eventId',
    path: '/topics/$topicId/events/$eventId',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/topics/$topicId/events/$eventId': {
      id: '/topics/$topicId/events/$eventId'
      path: '/topics/$topicId/events/$eventId'
      fullPath: '/topics/$topicId/events/$eventId'
      preLoaderRoute: typeof TopicsTopicIdEventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/topics/$topicId/events/': {
      id: '/topics/$topicId/events/'
      path: '/topics/$topicId/events'
      fullPath: '/topics/$topicId/events'
      preLoaderRoute: typeof TopicsTopicIdEventsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/topics/$topicId/events/$eventId': typeof TopicsTopicIdEventsEventIdRoute
  '/topics/$topicId/events': typeof TopicsTopicIdEventsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/topics/$topicId/events/$eventId': typeof TopicsTopicIdEventsEventIdRoute
  '/topics/$topicId/events': typeof TopicsTopicIdEventsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/topics/$topicId/events/$eventId': typeof TopicsTopicIdEventsEventIdRoute
  '/topics/$topicId/events/': typeof TopicsTopicIdEventsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/topics/$topicId/events/$eventId'
    | '/topics/$topicId/events'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/topics/$topicId/events/$eventId' | '/topics/$topicId/events'
  id:
    | '__root__'
    | '/'
    | '/topics/$topicId/events/$eventId'
    | '/topics/$topicId/events/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TopicsTopicIdEventsEventIdRoute: typeof TopicsTopicIdEventsEventIdRoute
  TopicsTopicIdEventsIndexRoute: typeof TopicsTopicIdEventsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TopicsTopicIdEventsEventIdRoute: TopicsTopicIdEventsEventIdRoute,
  TopicsTopicIdEventsIndexRoute: TopicsTopicIdEventsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/topics/$topicId/events/$eventId",
        "/topics/$topicId/events/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/topics/$topicId/events/$eventId": {
      "filePath": "topics/$topicId.events/$eventId.tsx"
    },
    "/topics/$topicId/events/": {
      "filePath": "topics/$topicId.events/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
