/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetInteractionCountForEventParams,
  GetUserInteractionsByTypeParams,
  InteractionCountResponse,
  InteractionRecordRequest,
  InteractionRecordResponse,
  UserEventInteraction
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 유저가 피드에서 이벤트와 상호작용한 내역을 기록합니다
 * @summary 사용자 이벤트 상호작용 기록
 */
export const recordInteraction = (
    interactionRecordRequest: InteractionRecordRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<InteractionRecordResponse>(
      {url: `/api/interactions/record`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: interactionRecordRequest, signal
    },
      options);
    }
  


export const getRecordInteractionMutationOptions = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recordInteraction>>, TError,{data: InteractionRecordRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof recordInteraction>>, TError,{data: InteractionRecordRequest}, TContext> => {

const mutationKey = ['recordInteraction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof recordInteraction>>, {data: InteractionRecordRequest}> = (props) => {
          const {data} = props ?? {};

          return  recordInteraction(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RecordInteractionMutationResult = NonNullable<Awaited<ReturnType<typeof recordInteraction>>>
    export type RecordInteractionMutationBody = InteractionRecordRequest
    export type RecordInteractionMutationError = string

    /**
 * @summary 사용자 이벤트 상호작용 기록
 */
export const useRecordInteraction = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof recordInteraction>>, TError,{data: InteractionRecordRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof recordInteraction>>,
        TError,
        {data: InteractionRecordRequest},
        TContext
      > => {

      const mutationOptions = getRecordInteractionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary 사용자의 특정 타입 상호작용 조회
 */
export const getUserInteractionsByType = (
    userId: number,
    params: GetUserInteractionsByTypeParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<UserEventInteraction[]>(
      {url: `/api/interactions/user/${userId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUserInteractionsByTypeQueryKey = (userId?: number,
    params?: GetUserInteractionsByTypeParams,) => {
    return [`/api/interactions/user/${userId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserInteractionsByTypeQueryOptions = <TData = Awaited<ReturnType<typeof getUserInteractionsByType>>, TError = string>(userId: number,
    params: GetUserInteractionsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsByType>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserInteractionsByTypeQueryKey(userId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserInteractionsByType>>> = ({ signal }) => getUserInteractionsByType(userId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId),  staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsByType>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserInteractionsByTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getUserInteractionsByType>>>
export type GetUserInteractionsByTypeQueryError = string


export function useGetUserInteractionsByType<TData = Awaited<ReturnType<typeof getUserInteractionsByType>>, TError = string>(
 userId: number,
    params: GetUserInteractionsByTypeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsByType>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInteractionsByType>>,
          TError,
          Awaited<ReturnType<typeof getUserInteractionsByType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserInteractionsByType<TData = Awaited<ReturnType<typeof getUserInteractionsByType>>, TError = string>(
 userId: number,
    params: GetUserInteractionsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsByType>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInteractionsByType>>,
          TError,
          Awaited<ReturnType<typeof getUserInteractionsByType>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserInteractionsByType<TData = Awaited<ReturnType<typeof getUserInteractionsByType>>, TError = string>(
 userId: number,
    params: GetUserInteractionsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsByType>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용자의 특정 타입 상호작용 조회
 */

export function useGetUserInteractionsByType<TData = Awaited<ReturnType<typeof getUserInteractionsByType>>, TError = string>(
 userId: number,
    params: GetUserInteractionsByTypeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsByType>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserInteractionsByTypeQueryOptions(userId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary 특정 이벤트에 대한 사용자 상호작용 조회
 */
export const getUserInteractionsForEvent = (
    userId: number,
    eventId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<UserEventInteraction[]>(
      {url: `/api/interactions/user/${userId}/event/${eventId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserInteractionsForEventQueryKey = (userId?: number,
    eventId?: number,) => {
    return [`/api/interactions/user/${userId}/event/${eventId}`] as const;
    }

    
export const getGetUserInteractionsForEventQueryOptions = <TData = Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError = string>(userId: number,
    eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserInteractionsForEventQueryKey(userId,eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserInteractionsForEvent>>> = ({ signal }) => getUserInteractionsForEvent(userId,eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId && eventId),  staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserInteractionsForEventQueryResult = NonNullable<Awaited<ReturnType<typeof getUserInteractionsForEvent>>>
export type GetUserInteractionsForEventQueryError = string


export function useGetUserInteractionsForEvent<TData = Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError = string>(
 userId: number,
    eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInteractionsForEvent>>,
          TError,
          Awaited<ReturnType<typeof getUserInteractionsForEvent>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserInteractionsForEvent<TData = Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError = string>(
 userId: number,
    eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserInteractionsForEvent>>,
          TError,
          Awaited<ReturnType<typeof getUserInteractionsForEvent>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserInteractionsForEvent<TData = Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError = string>(
 userId: number,
    eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 특정 이벤트에 대한 사용자 상호작용 조회
 */

export function useGetUserInteractionsForEvent<TData = Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError = string>(
 userId: number,
    eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserInteractionsForEvent>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserInteractionsForEventQueryOptions(userId,eventId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary 특정 이벤트의 상호작용 통계 조회
 */
export const getInteractionCountForEvent = (
    eventId: number,
    params: GetInteractionCountForEventParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<InteractionCountResponse>(
      {url: `/api/interactions/event/${eventId}/count`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetInteractionCountForEventQueryKey = (eventId?: number,
    params?: GetInteractionCountForEventParams,) => {
    return [`/api/interactions/event/${eventId}/count`, ...(params ? [params]: [])] as const;
    }

    
export const getGetInteractionCountForEventQueryOptions = <TData = Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError = string>(eventId: number,
    params: GetInteractionCountForEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInteractionCountForEventQueryKey(eventId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInteractionCountForEvent>>> = ({ signal }) => getInteractionCountForEvent(eventId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId),  staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInteractionCountForEventQueryResult = NonNullable<Awaited<ReturnType<typeof getInteractionCountForEvent>>>
export type GetInteractionCountForEventQueryError = string


export function useGetInteractionCountForEvent<TData = Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError = string>(
 eventId: number,
    params: GetInteractionCountForEventParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInteractionCountForEvent>>,
          TError,
          Awaited<ReturnType<typeof getInteractionCountForEvent>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInteractionCountForEvent<TData = Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError = string>(
 eventId: number,
    params: GetInteractionCountForEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInteractionCountForEvent>>,
          TError,
          Awaited<ReturnType<typeof getInteractionCountForEvent>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInteractionCountForEvent<TData = Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError = string>(
 eventId: number,
    params: GetInteractionCountForEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 특정 이벤트의 상호작용 통계 조회
 */

export function useGetInteractionCountForEvent<TData = Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError = string>(
 eventId: number,
    params: GetInteractionCountForEventParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInteractionCountForEvent>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetInteractionCountForEventQueryOptions(eventId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



