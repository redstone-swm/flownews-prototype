/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  TopicSubscriptionToggleResponse
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 토픽 구독 상태를 토글합니다. 구독 중이면 해제하고, 구독하지 않았으면 구독합니다.
 * @summary 토픽 구독 토글
 */
export const toggleSubscription = (
    topicId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<TopicSubscriptionToggleResponse>(
      {url: `/topics/${topicId}/toggle-subscription`, method: 'POST', signal
    },
      options);
    }
  


export const getToggleSubscriptionMutationOptions = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof toggleSubscription>>, TError,{topicId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof toggleSubscription>>, TError,{topicId: number}, TContext> => {

const mutationKey = ['toggleSubscription'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof toggleSubscription>>, {topicId: number}> = (props) => {
          const {topicId} = props ?? {};

          return  toggleSubscription(topicId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ToggleSubscriptionMutationResult = NonNullable<Awaited<ReturnType<typeof toggleSubscription>>>
    
    export type ToggleSubscriptionMutationError = string

    /**
 * @summary 토픽 구독 토글
 */
export const useToggleSubscription = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof toggleSubscription>>, TError,{topicId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof toggleSubscription>>,
        TError,
        {topicId: number},
        TContext
      > => {

      const mutationOptions = getToggleSubscriptionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    