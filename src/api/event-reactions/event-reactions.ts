/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ReactionToggleResponse
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 특정 이벤트에 대한 반응을 토글합니다. 같은 반응 타입을 누르면 토글(추가/해제)되고, 다른 반응 타입을 누르면 기존 반응을 해제하고 새로운 반응을 추가합니다.
 * @summary 이벤트 반응 토글
 */
export const toggleReaction = (
    eventId: number,
    reactionTypeId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ReactionToggleResponse>(
      {url: `/events/${eventId}/reactions/${reactionTypeId}`, method: 'POST', signal
    },
      options);
    }
  


export const getToggleReactionMutationOptions = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof toggleReaction>>, TError,{eventId: number;reactionTypeId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof toggleReaction>>, TError,{eventId: number;reactionTypeId: number}, TContext> => {

const mutationKey = ['toggleReaction'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof toggleReaction>>, {eventId: number;reactionTypeId: number}> = (props) => {
          const {eventId,reactionTypeId} = props ?? {};

          return  toggleReaction(eventId,reactionTypeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ToggleReactionMutationResult = NonNullable<Awaited<ReturnType<typeof toggleReaction>>>
    
    export type ToggleReactionMutationError = string

    /**
 * @summary 이벤트 반응 토글
 */
export const useToggleReaction = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof toggleReaction>>, TError,{eventId: number;reactionTypeId: number}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof toggleReaction>>,
        TError,
        {eventId: number;reactionTypeId: number},
        TContext
      > => {

      const mutationOptions = getToggleReactionMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    