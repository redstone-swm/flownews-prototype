/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAllTopicsParams,
  GetTopKTopicsParams,
  TopicSummaryResponse,
  TopicTopKQueryResponse
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAllTopics = (
    params?: GetAllTopicsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<TopicSummaryResponse[]>(
      {url: `/topics`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAllTopicsQueryKey = (params?: GetAllTopicsParams,) => {
    return [`/topics`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAllTopicsQueryOptions = <TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(params?: GetAllTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllTopicsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllTopics>>> = ({ signal }) => getAllTopics(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllTopicsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllTopics>>>
export type GetAllTopicsQueryError = string


export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
 params: undefined |  GetAllTopicsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllTopics>>,
          TError,
          Awaited<ReturnType<typeof getAllTopics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
 params?: GetAllTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllTopics>>,
          TError,
          Awaited<ReturnType<typeof getAllTopics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
 params?: GetAllTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
 params?: GetAllTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllTopicsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getTopKTopics = (
    params?: GetTopKTopicsParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<TopicTopKQueryResponse[]>(
      {url: `/topics/topk`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetTopKTopicsQueryKey = (params?: GetTopKTopicsParams,) => {
    return [`/topics/topk`, ...(params ? [params]: [])] as const;
    }

    
export const getGetTopKTopicsQueryOptions = <TData = Awaited<ReturnType<typeof getTopKTopics>>, TError = string>(params?: GetTopKTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopKTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopKTopicsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopKTopics>>> = ({ signal }) => getTopKTopics(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopKTopics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopKTopicsQueryResult = NonNullable<Awaited<ReturnType<typeof getTopKTopics>>>
export type GetTopKTopicsQueryError = string


export function useGetTopKTopics<TData = Awaited<ReturnType<typeof getTopKTopics>>, TError = string>(
 params: undefined |  GetTopKTopicsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopKTopics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopKTopics>>,
          TError,
          Awaited<ReturnType<typeof getTopKTopics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopKTopics<TData = Awaited<ReturnType<typeof getTopKTopics>>, TError = string>(
 params?: GetTopKTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopKTopics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopKTopics>>,
          TError,
          Awaited<ReturnType<typeof getTopKTopics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopKTopics<TData = Awaited<ReturnType<typeof getTopKTopics>>, TError = string>(
 params?: GetTopKTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopKTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTopKTopics<TData = Awaited<ReturnType<typeof getTopKTopics>>, TError = string>(
 params?: GetTopKTopicsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopKTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopKTopicsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



