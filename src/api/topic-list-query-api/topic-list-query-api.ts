/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetAllTopics200
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getAllTopics = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<GetAllTopics200>(
      {url: `/topics`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllTopicsQueryKey = () => {
    return [`/topics`] as const;
    }

    
export const getGetAllTopicsQueryOptions = <TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllTopicsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllTopics>>> = ({ signal }) => getAllTopics(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllTopicsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllTopics>>>
export type GetAllTopicsQueryError = string


export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllTopics>>,
          TError,
          Awaited<ReturnType<typeof getAllTopics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllTopics>>,
          TError,
          Awaited<ReturnType<typeof getAllTopics>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAllTopics<TData = Awaited<ReturnType<typeof getAllTopics>>, TError = string>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllTopics>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllTopicsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



