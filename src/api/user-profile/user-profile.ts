/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  UserProfileUpdateRequest
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 생일과 성별을 입력하여 프로필을 완성합니다.
 * @summary 사용자 프로필 완성
 */
export const updateProfile = (
    userProfileUpdateRequest: UserProfileUpdateRequest,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/api/users/profile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userProfileUpdateRequest, signal
    },
      options);
    }
  


export const getUpdateProfileMutationOptions = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfile>>, TError,{data: UserProfileUpdateRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateProfile>>, TError,{data: UserProfileUpdateRequest}, TContext> => {

const mutationKey = ['updateProfile'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProfile>>, {data: UserProfileUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateProfile(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProfileMutationResult = NonNullable<Awaited<ReturnType<typeof updateProfile>>>
    export type UpdateProfileMutationBody = UserProfileUpdateRequest
    export type UpdateProfileMutationError = string

    /**
 * @summary 사용자 프로필 완성
 */
export const useUpdateProfile = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProfile>>, TError,{data: UserProfileUpdateRequest}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateProfile>>,
        TError,
        {data: UserProfileUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateProfileMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    