/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  TopicQueryResponse
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 토픽 ID로 특정 토픽의 상세 정보와 관련 이벤트들을 조회합니다. 사용자의 팔로우 상태도 함께 반환됩니다.
 * @summary 특정 토픽 상세 조회
 */
export const getTopic = (
    topicId: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<TopicQueryResponse>(
      {url: `/topics/${topicId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTopicQueryKey = (topicId?: number,) => {
    return [`/topics/${topicId}`] as const;
    }

    
export const getGetTopicQueryOptions = <TData = Awaited<ReturnType<typeof getTopic>>, TError = string>(topicId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopic>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTopicQueryKey(topicId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTopic>>> = ({ signal }) => getTopic(topicId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(topicId),  staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTopic>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTopicQueryResult = NonNullable<Awaited<ReturnType<typeof getTopic>>>
export type GetTopicQueryError = string


export function useGetTopic<TData = Awaited<ReturnType<typeof getTopic>>, TError = string>(
 topicId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopic>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopic>>,
          TError,
          Awaited<ReturnType<typeof getTopic>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopic<TData = Awaited<ReturnType<typeof getTopic>>, TError = string>(
 topicId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopic>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTopic>>,
          TError,
          Awaited<ReturnType<typeof getTopic>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTopic<TData = Awaited<ReturnType<typeof getTopic>>, TError = string>(
 topicId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopic>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 특정 토픽 상세 조회
 */

export function useGetTopic<TData = Awaited<ReturnType<typeof getTopic>>, TError = string>(
 topicId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTopic>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetTopicQueryOptions(topicId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



