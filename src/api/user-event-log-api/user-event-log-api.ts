/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * FlowNews API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  AppendEventLogBody
} from '.././models';

import { axiosInstance } from '.././axiosInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const appendEventLog = (
    eventType: string,
    appendEventLogBody: AppendEventLogBody,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/logs/${eventType}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: appendEventLogBody, signal
    },
      options);
    }
  


export const getAppendEventLogMutationOptions = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appendEventLog>>, TError,{eventType: string;data: AppendEventLogBody}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof appendEventLog>>, TError,{eventType: string;data: AppendEventLogBody}, TContext> => {

const mutationKey = ['appendEventLog'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof appendEventLog>>, {eventType: string;data: AppendEventLogBody}> = (props) => {
          const {eventType,data} = props ?? {};

          return  appendEventLog(eventType,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AppendEventLogMutationResult = NonNullable<Awaited<ReturnType<typeof appendEventLog>>>
    export type AppendEventLogMutationBody = AppendEventLogBody
    export type AppendEventLogMutationError = string

    export const useAppendEventLog = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appendEventLog>>, TError,{eventType: string;data: AppendEventLogBody}, TContext>, request?: SecondParameter<typeof axiosInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof appendEventLog>>,
        TError,
        {eventType: string;data: AppendEventLogBody},
        TContext
      > => {

      const mutationOptions = getAppendEventLogMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    